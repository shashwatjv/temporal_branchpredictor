#include "ooo_cpu.h"

#define PBHT_SIZE 1024*2
#define GPHT_SIZE 16
#define MAX_COUNTER 3

int PBHT[NUM_CPUS][PBHT_SIZE];
int GPHT[GPHT_SIZE];

void O3_CPU::initialize_branch_predictor()
{

	cout << "CPU" << cpu << "PAg branch predictor" << endl;
	
	//Initializing Per-address Branch History Table
    	for(int i=0; i<PBHT_SIZE; i++)
		PBHT[cpu][i] = 0;
	
	//Initializing Global Pattern History Table
	for(int j=0; j<GPHT_SIZE; j++)
		GPHT[j] = 0;
	
	head = cbuf.end();
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{

    int hash = ip % PBHT_SIZE;

    int x = PBHT[cpu][hash]; //history

    basepred = (GPHT[x] >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;

    if (head != cbuf.end()) {
      ++head;
      if (!*head) {
        return !basepred;
      }
    }

    return basepred;
}

bitset<TS_KEY_SIZE> O3_CPU::key_gen(uint64_t PC) { 
    bitset<TS_KEY_SIZE> pc = bitset<TS_KEY_SIZE>(PC);
    return pc | (hist << 32);
}


void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken, uint8_t predDir)
{


    int hash = ip % PBHT_SIZE;

    int x = PBHT[cpu][hash]; //old history

    if (taken && (GPHT[x] < MAX_COUNTER))
        GPHT[x]++;
    else if ((taken == 0) && (GPHT[x] > 0))
        GPHT[x]--;

    PBHT[cpu][hash] = ((x << 1) | taken) & 0xFF; //new history 

  hist <<= 1;
  if(taken == 1){
    hist[0] = 1;
  }

  // update circular buffer 
  cbuf.push_back(basepred == taken); // checks actual and base prediction
  
  if (head != cbuf.end() && taken != predDir) { // replay fail
    head = cbuf.end(); // Start all from starting 
  }

  if (basepred != taken) { // base make a mistake

    bitset<TS_KEY_SIZE> idx = key_gen(ip); // generating key 

    if (head == cbuf.end()) { // not replaying, try start replay
      std::map<bitset<TS_KEY_SIZE>, std::list<char>::iterator, bitset<TS_KEY_SIZE> >::iterator pair = table.find(idx); 
	// ( Checking head table for entry) 
      if (pair != table.end()) head = pair->second; // (if not in head table then separate out head and tail) 
    }

    // record location
    table[idx] = cbuf.end(); // (updating the Head Table)
    --table[idx];
  }


}
