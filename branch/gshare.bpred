#include "ooo_cpu.h"

#define GPT_SIZE 1024*2
#define MAX_COUNTER 3

int GPT[NUM_CPUS][GPT_SIZE]; //Global Predictor Table
int GR; //Global History Register

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU" << cpu << "gshare branch predictor" << endl;

	GR = 0; //Initializing Global History Register

	//Initializing Global Predictor Table
    	for(int i=0; i<GPT_SIZE; i++)
		GPT[cpu][i] = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    int prediction = 1;

    int gpt_index = (ip ^ GR) % GPT_SIZE;

    prediction = (GPT[cpu][gpt_index] >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;

    return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    int gpt_index = (ip ^ GR) % GPT_SIZE;

    if (taken && (GPT[cpu][gpt_index] < MAX_COUNTER))
        GPT[cpu][gpt_index]++;
    else if ((taken == 0) && (GPT[cpu][gpt_index] > 0))
        GPT[cpu][gpt_index]--;

    GR = ((GR << 1) | taken) & 0xFFFF; //16-bit GR (formed from the 0x3FF masking)
}
