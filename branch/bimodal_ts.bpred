#include "ooo_cpu.h"

#define BIMODAL_TABLE_SIZE 1024*2
#define BIMODAL_PRIME 1024*2
#define MAX_COUNTER 3

int bimodal_table[NUM_CPUS][BIMODAL_TABLE_SIZE];

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " Bimodal branch predictor" << endl;

    for(int i=0; i<BIMODAL_TABLE_SIZE; i++)
        bimodal_table[cpu][i] = 0;

    head = cbuf.end();
}


uint8_t O3_CPU::predict_branch(uint64_t ip)
{

    int hash = ip % BIMODAL_PRIME;
    basepred = (bimodal_table[cpu][hash] >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;

    if (head != cbuf.end()) {
       ++head;
       if (!*head) {
         return !basepred;
       }
    }

    return basepred;
}

bitset<TS_KEY_SIZE> O3_CPU::key_gen(uint64_t PC) { 
    bitset<TS_KEY_SIZE> pc = bitset<TS_KEY_SIZE>(PC);
    return pc;

}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken, uint8_t predDir)
{
    int hash = ip % BIMODAL_PRIME;

    if (taken && (bimodal_table[cpu][hash] < MAX_COUNTER))
        bimodal_table[cpu][hash]++;
    else if ((taken == 0) && (bimodal_table[cpu][hash] > 0))
        bimodal_table[cpu][hash]--;

#ifdef BPRED_DBG_ON
cout << "DBG-BRANCH: | ID: " << instr_unique_id << std::hex << "|PC: " << ip << std::dec << "|BASE: " << (uint32_t) (basepred) << "|TS: " << (uint32_t) (predDir) << "|ACT: " << (uint32_t)(taken) << "|REPLAY: " << (uint32_t)(replay) << " |" << endl;
#endif

  // update the circular buffer entry
  cbuf.push_back(basepred == taken); // checks (ActualPrediction = or != BasePrediction) 
  
  if (head != cbuf.end() && taken != predDir) { // replay fails
    head = cbuf.end(); // Start all from beginning
    replay = 0;
  }

  if (basepred != taken) { // base makes a misprediction

    bitset<TS_KEY_SIZE> idx = key_gen(ip); // generating key for first time

    if (head == cbuf.end()) { // not replaying, try start replay 
      std::map<bitset<TS_KEY_SIZE>, std::list<char>::iterator, bitset<TS_KEY_SIZE> >::iterator pair = table.find(idx); 
      // ( Checking head table for entry)
      if (pair != table.end()) {
	head = pair->second; // (if in head table then separate out head and tail) 
	replay = 1;
      }
    }

    // record location
    table[idx] = cbuf.end(); // (updating the Head Table)
    --table[idx];
 
  }
}
