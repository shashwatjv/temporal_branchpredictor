#include "ooo_cpu.h"

#define GPT_SIZE 1024*2
#define MAX_COUNTER 3

int GPT[NUM_CPUS][GPT_SIZE]; //Global Predictor Table
int GR; //Global History Register


void O3_CPU::initialize_branch_predictor()
{

cout << "CPU" << cpu << "gshare branch predictor" << endl;

	GR = 0; //Initializing Global History Register

	//Initializing Global Predictor Table
    	for(int i=0; i<GPT_SIZE; i++)
		GPT[cpu][i] = 0;

	head = cbuf.end();
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{

    int gpt_index = (ip ^ GR) % GPT_SIZE;

    basepred = (GPT[cpu][gpt_index] >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;

    if (head != cbuf.end()) {
      ++head;
      if (!*head) {
        return !basepred;
      }
    }

    return basepred;
}

bitset<TS_KEY_SIZE> O3_CPU::key_gen(uint64_t PC) { 
    bitset<TS_KEY_SIZE> pc = bitset<TS_KEY_SIZE>(PC);
    return pc | (hist << 32);
}


void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken, uint8_t predDir)
{


   int gpt_index = (ip ^ GR) % GPT_SIZE;

    if (taken && (GPT[cpu][gpt_index] < MAX_COUNTER))
        GPT[cpu][gpt_index]++;
    else if ((taken == 0) && (GPT[cpu][gpt_index] > 0))
        GPT[cpu][gpt_index]--;

#ifdef BPRED_DBG_ON
cout << "DBG-BRANCH| ID: " << instr_unique_id << " |PC: " << std::hex << ip << " |GR: " << GR << " |HASH: " << gpt_index << " |BASE: " << std::dec << (uint32_t) (basepred) << "|TS: " << (uint32_t) (predDir) << " |ACT: " << (uint32_t) (taken) << " |REPLAY: " << (uint32_t) (replay) << " |" << endl;
#endif

    GR = ((GR << 1) | taken) & 0xFFFF; //16-bit GR 

  hist <<= 1;
  if(taken == 1){
    hist[0] = 1;
  }

  // update circular buffer
  cbuf.push_back(basepred == taken); // checks (Real = or != Base) 
  
  if (head != cbuf.end() && taken != predDir) { // replay fails
    head = cbuf.end(); // Start all from starting 
    replay = 0;
  }

  if (basepred != taken) { // base predicts incorrectly, lookup if the key present in head table

    bitset<TS_KEY_SIZE> idx = key_gen(ip);

    if (head == cbuf.end()) { // not replaying, try start replay 
      std::map<bitset<TS_KEY_SIZE>, std::list<char>::iterator, bitset<TS_KEY_SIZE> >::iterator pair = table.find(idx); 
      // ( Checking head table for entry) 
      if (pair != table.end()) {
	head = pair->second; // (if not in head table then separate out head and tail) 
	replay = 1;
      }
    }

    // record location
    table[idx] = cbuf.end(); // (updating the Head Table)
    --table[idx];
  }


}
